{"version":3,"sources":["assets\\scripts\\Yu\\3Match\\Tile.ts"],"names":[],"mappings":"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","file":"","sourceRoot":"/","sourcesContent":["const { ccclass, property } = cc._decorator;\r\nimport ThreeMatchBoard from \"./3MatchBoard\";\r\n@ccclass\r\nexport default class Tile extends cc.Component {\r\n    @property(cc.Sprite) // 스프라이트 컴포넌트 연결\r\n    sprite: cc.Sprite = null;  // 기존 sprite 속성 복구\r\n\r\n    @property(cc.Prefab) // 폭발 효과 프리팹 속성 추가\r\n    explosionPrefab: cc.Prefab = null;\r\n\r\n    private colors: cc.Color[] = [\r\n        cc.Color.RED, cc.Color.BLUE, cc.Color.GREEN, cc.Color.YELLOW, cc.Color.ORANGE\r\n    ];\r\n\r\n    public row: number = 0;\r\n    public col: number = 0;\r\n\r\n    private static selectedTile: Tile = null;\r\n\r\n    // 노드가 씬에 생성되면서 초기화 단계.\r\n    // 이 시점에 컴포넌트, 스프라이트, 이벤트 리스너 등을 등록\r\n    onLoad() {\r\n        // 스프라이트 컴포넌트가 없으면 추가\r\n        if (!this.sprite) {\r\n            this.sprite = this.node.addComponent(cc.Sprite);\r\n        }\r\n\r\n        this.node.on(cc.Node.EventType.TOUCH_END, this.onTileClicked, this);\r\n\r\n    }\r\n\r\n    setRandomColor() {\r\n        let randomIndex = Math.floor(Math.random() * this.colors.length);\r\n        this.node.color = this.colors[randomIndex];\r\n    }\r\n\r\n    setRandomColorExcluding(excludeColors: cc.Color[]) {\r\n        let availableColors = this.colors.filter(color => {\r\n            return !excludeColors.some(ex => ex.equals(color));\r\n        });\r\n    \r\n        // 혹시 모든 색이 제외되면 그냥 랜덤으로 (안전장치)\r\n        if (availableColors.length === 0) {\r\n            availableColors = this.colors;\r\n        }\r\n    \r\n        const randomIndex = Math.floor(Math.random() * availableColors.length);\r\n        const color = availableColors[randomIndex];\r\n        this.node.color = color;\r\n    }\r\n    \r\n\r\n    addOutline() {\r\n        // 기존에 있던 Graphics가 있으면 제거\r\n        let existingGraphics = this.node.getComponent(cc.Graphics);\r\n        if (existingGraphics) {\r\n            this.node.removeComponent(existingGraphics);\r\n        }\r\n    \r\n        // 새 Graphics 노드 생성\r\n        let graphicsNode = new cc.Node();\r\n        graphicsNode.parent = this.node;\r\n        graphicsNode.setPosition(0, 0);\r\n    \r\n        let graphics = graphicsNode.addComponent(cc.Graphics);\r\n        graphics.lineWidth = 5; // 테두리 두께\r\n        graphics.strokeColor = cc.Color.BLACK; // 테두리 색상\r\n    \r\n        let size = this.node.getContentSize();\r\n        console.log(\"Tile Size:\", size); // 디버깅 로그\r\n    \r\n        // 테두리 그리기\r\n        graphics.rect(-size.width / 2, -size.height / 2, size.width, size.height);\r\n        graphics.stroke();\r\n    }\r\n\r\n    onTileClicked() {\r\n        if (!cc.isValid(this.node)) return;\r\n    \r\n        if (Tile.selectedTile === null) {\r\n            Tile.selectedTile = this;\r\n            this.highlight(true);\r\n        } else {\r\n            if (!cc.isValid(Tile.selectedTile.node)) {\r\n                Tile.selectedTile = null;\r\n                return;\r\n            }\r\n    \r\n            if (Tile.selectedTile === this) {\r\n                this.highlight(false);\r\n                Tile.selectedTile = null;\r\n                return;\r\n            }\r\n    \r\n            this.highlight(false);\r\n            Tile.selectedTile.highlight(false);\r\n    \r\n            const board = this.node.parent.getComponent(ThreeMatchBoard);\r\n            if (board) {\r\n                board.swapTiles(this, Tile.selectedTile);\r\n            }\r\n    \r\n            Tile.selectedTile = null;\r\n        }\r\n    }\r\n    \r\n    \r\n\r\n    highlight(enable: boolean) {\r\n        if (!this.node || !cc.isValid(this.node)) return;  // 추가\r\n        this.node.scale = enable ? 1.1 : 1.0;\r\n    }\r\n    \r\n\r\n    swapPosition(otherTile: Tile) {\r\n        // 위치 바꾸기\r\n        const tempPos = this.node.getPosition();\r\n        this.node.setPosition(otherTile.node.getPosition());\r\n        otherTile.node.setPosition(tempPos);\r\n\r\n        // row, col 교환\r\n        const tempRow = this.row;\r\n        const tempCol = this.col;\r\n        this.row = otherTile.row;\r\n        this.col = otherTile.col;\r\n        otherTile.row = tempRow;\r\n        otherTile.col = tempCol;\r\n    }\r\n\r\n    explode() {\r\n        console.log(`explode() 실행: (${this.row}, ${this.col})`);\r\n    \r\n        // 이펙트 생성\r\n        if (this.explosionPrefab) {\r\n            console.log(`폭발 이펙트 생성: (${this.row}, ${this.col})`);\r\n            const effect = cc.instantiate(this.explosionPrefab);\r\n            effect.parent = this.node.parent;\r\n            effect.setPosition(this.node.getPosition());\r\n    \r\n            // 효과가 끝나면 자동 제거\r\n            const ps = effect.getComponent(cc.ParticleSystem);\r\n            ps && ps.resetSystem();\r\n    \r\n            this.scheduleOnce(() => {\r\n                console.log(`폭발 이펙트 제거: (${this.row}, ${this.col})`);\r\n                effect.destroy();\r\n            }, 1);\r\n        }\r\n    \r\n        // 애니메이션 + 파괴\r\n        this.node.runAction(\r\n            cc.sequence(\r\n                cc.spawn(\r\n                    cc.scaleTo(0.2, 1.5).easing(cc.easeBackOut()),\r\n                    cc.fadeOut(0.2)\r\n                ),\r\n                cc.callFunc(() => {\r\n                    if (Tile.selectedTile === this) {\r\n                        Tile.selectedTile = null;  // 사라질 때 선택 해제\r\n                    }\r\n                    this.node.destroy();\r\n                })\r\n            )\r\n        );\r\n    }\r\n    \r\n    \r\n\r\n    \r\n}\r\n"]}