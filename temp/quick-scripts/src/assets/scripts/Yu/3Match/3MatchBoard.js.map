{"version":3,"sources":["assets\\scripts\\Yu\\3Match\\3MatchBoard.ts"],"names":[],"mappings":"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","file":"","sourceRoot":"/","sourcesContent":["const { ccclass, property } = cc._decorator;\r\nimport ThreeMatchManager from \"./3MatchManager\";\r\nimport Tile from \"./Tile\";\r\n\r\n@ccclass\r\nexport default class ThreeMatchBoard extends cc.Component {\r\n    @property(cc.Prefab) tilePrefab: cc.Prefab = null;\r\n    @property(ThreeMatchManager) gameManager: ThreeMatchManager = null;\r\n\r\n    private boardSize: number = 8;  // 항상 8x8 고정\r\n    private tileSize: number = 100;\r\n    private gap: number = 5;\r\n\r\n    private board: Tile[][] = [];\r\n    private isSwapping: boolean = false;\r\n\r\n    start() {\r\n        this.node.color = cc.Color.GRAY;\r\n        this.createBoard();\r\n    }\r\n\r\n    createBoard() {\r\n        this.board = [];\r\n        let totalTileSize = this.tileSize + this.gap;\r\n        let startX = -(this.boardSize - 1) * totalTileSize / 2;\r\n        let startY = (this.boardSize - 1) * totalTileSize / 2;\r\n\r\n        for (let row = 0; row < this.boardSize; row++) {\r\n            this.board[row] = [];\r\n            for (let col = 0; col < this.boardSize; col++) {\r\n                let tileNode = cc.instantiate(this.tilePrefab);\r\n                tileNode.parent = this.node;\r\n\r\n                let posX = startX + col * totalTileSize;\r\n                let posY = startY - row * totalTileSize;\r\n                tileNode.setPosition(posX, posY);\r\n\r\n                let tile = tileNode.getComponent(Tile);\r\n                tile.row = row;\r\n                tile.col = col;\r\n\r\n                let bannedColors: cc.Color[] = [];\r\n                if (col >= 2) {\r\n                    let left1 = this.board[row][col - 1];\r\n                    let left2 = this.board[row][col - 2];\r\n                    if (left1 && left2 && left1.node.color.equals(left2.node.color)) {\r\n                        bannedColors.push(left1.node.color);\r\n                    }\r\n                }\r\n                if (row >= 2) {\r\n                    let top1 = this.board[row - 1][col];\r\n                    let top2 = this.board[row - 2][col];\r\n                    if (top1 && top2 && top1.node.color.equals(top2.node.color)) {\r\n                        bannedColors.push(top1.node.color);\r\n                    }\r\n                }\r\n\r\n                tile.setRandomColorExcluding(bannedColors);\r\n                tile.addOutline();\r\n\r\n                this.board[row][col] = tile;\r\n            }\r\n        }\r\n    }\r\n\r\n    private colorsAreEqual(c1: cc.Color, c2: cc.Color): boolean {\r\n        return c1.r === c2.r && c1.g === c2.g && c1.b === c2.b;\r\n    }\r\n\r\n    checkAndExplodeMatches() {\r\n        let matchedTiles: Tile[] = [];\r\n\r\n        for (let row = 0; row < this.boardSize; row++) {\r\n            for (let col = 0; col < this.boardSize; col++) {\r\n                let tile = this.board[row][col];\r\n                if (!tile) continue;\r\n\r\n                // 가로 검사\r\n                if (col <= this.boardSize - 3) {\r\n                    let t1 = this.board[row][col + 1];\r\n                    let t2 = this.board[row][col + 2];\r\n\r\n                    if (t1 && t2 && this.colorsAreEqual(tile.node.color, t1.node.color) && this.colorsAreEqual(tile.node.color, t2.node.color)) {\r\n                        console.log(`가로 매칭 발견! (${row}, ${col})`);\r\n                        matchedTiles.push(tile, t1, t2);\r\n                    }\r\n                }\r\n\r\n                // 세로 검사\r\n                if (row <= this.boardSize - 3) {\r\n                    let t1 = this.board[row + 1][col];\r\n                    let t2 = this.board[row + 2][col];\r\n\r\n                    if (t1 && t2 && this.colorsAreEqual(tile.node.color, t1.node.color) && this.colorsAreEqual(tile.node.color, t2.node.color)) {\r\n                        console.log(`세로 매칭 발견! (${row}, ${col})`);\r\n                        matchedTiles.push(tile, t1, t2);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        matchedTiles = Array.from(new Set(matchedTiles));\r\n\r\n        if (matchedTiles.length > 0) {\r\n            console.log(`${matchedTiles.length}개 타일 폭발!`);\r\n            if (this.gameManager) {\r\n                this.gameManager.addMatchScore(matchedTiles.length);\r\n            }\r\n            for (const tile of matchedTiles) {\r\n                tile.explode();\r\n                this.board[tile.row][tile.col] = null;\r\n            }\r\n\r\n            this.scheduleOnce(() => {\r\n                this.fillEmptySpaces();\r\n                this.scheduleOnce(() => {\r\n                    this.spawnNewTiles();\r\n                    this.scheduleOnce(() => {\r\n                        this.checkAndExplodeMatches();\r\n                    }, 0.3);\r\n                }, 0.3);\r\n            }, 0.3);\r\n        }\r\n    }\r\n\r\n    swapTiles(tileA: Tile, tileB: Tile) {\r\n        if (this.isSwapping) return;\r\n\r\n        let rowDiff = Math.abs(tileA.row - tileB.row);\r\n        let colDiff = Math.abs(tileA.col - tileB.col);\r\n\r\n        if (!((rowDiff === 1 && colDiff === 0) || (rowDiff === 0 && colDiff === 1))) {\r\n            console.log(\" 인접한 타일이 아닙니다! 교환 불가\");\r\n            return;\r\n        }\r\n        this.isSwapping = true;\r\n\r\n        let tempRow = tileA.row;\r\n        let tempCol = tileA.col;\r\n\r\n        this.board[tileA.row][tileA.col] = tileB;\r\n        this.board[tileB.row][tileB.col] = tileA;\r\n\r\n        tileA.row = tileB.row;\r\n        tileA.col = tileB.col;\r\n        tileB.row = tempRow;\r\n        tileB.col = tempCol;\r\n\r\n        let moveA = cc.moveTo(0.2, tileB.node.getPosition());\r\n        let moveB = cc.moveTo(0.2, tileA.node.getPosition());\r\n\r\n        cc.tween(tileA.node)\r\n            .then(moveA)\r\n            .start();\r\n\r\n        cc.tween(tileB.node)\r\n            .then(moveB)\r\n            .call(() => {\r\n                this.checkAndExplodeMatches();\r\n                this.isSwapping = false;\r\n            })\r\n            .start();\r\n    }\r\n\r\n    fillEmptySpaces() {\r\n        for (let col = 0; col < this.boardSize; col++) {\r\n            for (let row = this.boardSize - 1; row >= 0; row--) {\r\n                if (!this.board[row][col]) {\r\n                    for (let upperRow = row - 1; upperRow >= 0; upperRow--) {\r\n                        if (this.board[upperRow][col]) {\r\n                            const fallingTile = this.board[upperRow][col];\r\n                            this.board[row][col] = fallingTile;\r\n                            this.board[upperRow][col] = null;\r\n\r\n                            fallingTile.row = row;\r\n                            fallingTile.col = col;\r\n\r\n                            const targetPos = this.getTilePosition(row, col);\r\n                            cc.tween(fallingTile.node)\r\n                                .to(0.2, { position: targetPos })\r\n                                .start();\r\n                            break;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    spawnNewTiles() {\r\n        for (let row = 0; row < this.boardSize; row++) {\r\n            for (let col = 0; col < this.boardSize; col++) {\r\n                if (!this.board[row][col]) {\r\n                    const tileNode = cc.instantiate(this.tilePrefab);\r\n                    tileNode.parent = this.node;\r\n\r\n                    const pos = this.getTilePosition(row, col);\r\n                    tileNode.setPosition(pos);\r\n\r\n                    const tile = tileNode.getComponent(Tile);\r\n                    tile.row = row;\r\n                    tile.col = col;\r\n\r\n                    tile.setRandomColor();\r\n                    tile.addOutline();\r\n\r\n                    this.board[row][col] = tile;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    getTilePosition(row: number, col: number): cc.Vec3 {\r\n        let totalTileSize = this.tileSize + this.gap;\r\n        let startX = -(this.boardSize - 1) * totalTileSize / 2;\r\n        let startY = (this.boardSize - 1) * totalTileSize / 2;\r\n\r\n        let x = startX + col * totalTileSize;\r\n        let y = startY - row * totalTileSize;\r\n\r\n        return new cc.Vec3(x, y, 0);\r\n    }\r\n\r\n\r\n    \r\n}\r\n"]}