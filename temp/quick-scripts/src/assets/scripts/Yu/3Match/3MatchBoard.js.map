{"version":3,"sources":["assets\\scripts\\Yu\\3Match\\3MatchBoard.ts"],"names":[],"mappings":"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","file":"","sourceRoot":"/","sourcesContent":["const { ccclass, property } = cc._decorator;\nimport ThreeMatchManager from \"./3MatchManager\";\nimport Tile from \"./Tile\";\n\n@ccclass\nexport default class ThreeMatchBoard extends cc.Component {\n    @property(cc.Prefab) tilePrefab: cc.Prefab = null;\n    @property(ThreeMatchManager) gameManager: ThreeMatchManager = null;\n\n    public boardSize: number = 7;  // 항상 8x8 고정\n    private tileSize: number = 100;\n    private gap: number = 10;\n\n    public board: Tile[][] = [];\n    private isSwapping: boolean = false;\n\nstart() {\n    this.node.color = cc.Color.GRAY;\n    this.createBoard();\n\n    this.scheduleOnce(() => {\n        this.checkAndExplodeMatches();  // 게임 시작 후 첫 매칭 탐지\n    }, 0.1);\n}\n\n\n    createBoard() {\n        this.board = [];\n        let totalTileSize = this.tileSize + this.gap;\n        let startX = -(this.boardSize - 1) * totalTileSize / 2;\n        let startY = (this.boardSize - 1) * totalTileSize / 2;\n\n        for (let row = 0; row < this.boardSize; row++) {\n            this.board[row] = [];\n            for (let col = 0; col < this.boardSize; col++) {\n                let tileNode = cc.instantiate(this.tilePrefab);\n                tileNode.parent = this.node;\n\n                let posX = startX + col * totalTileSize;\n                let posY = startY - row * totalTileSize;\n                tileNode.setPosition(posX, posY);\n\n                let tile = tileNode.getComponent(Tile);\n                tile.row = row;\n                tile.col = col;\n\n                // 1. bannedColors를 bannedIndices로\n                let bannedIndices: number[] = [];\n\n                if (col >= 2) {\n                    let left1 = this.board[row][col - 1];\n                    let left2 = this.board[row][col - 2];\n                    if (left1 && left2 && left1['fruitIndex'] === left2['fruitIndex']) {\n                        bannedIndices.push(left1['fruitIndex']);\n                    }\n                }\n                if (row >= 2) {\n                    let top1 = this.board[row - 1][col];\n                    let top2 = this.board[row - 2][col];\n                    if (top1 && top2 && top1['fruitIndex'] === top2['fruitIndex']) {\n                        bannedIndices.push(top1['fruitIndex']);\n                    }\n                }\n\n                // 2. 랜덤 과일 설정\n                tile.setRandomFruitExcluding(bannedIndices);\n                tile.addOutline();\n\n                this.board[row][col] = tile;\n            }\n        }\n    }\n\n    private colorsAreEqual(c1: cc.Color, c2: cc.Color): boolean {\n        return c1.r === c2.r && c1.g === c2.g && c1.b === c2.b;\n    }\n\n    checkAndExplodeMatches() {\n        let matchedTiles: Tile[] = [];\n    \n        for (let row = 0; row < this.boardSize; row++) {\n            for (let col = 0; col < this.boardSize; col++) {\n                let tile = this.board[row][col];\n                if (!tile) continue;\n    \n                // 가로 검사\n                if (col <= this.boardSize - 3) {\n                    let t1 = this.board[row][col + 1];\n                    let t2 = this.board[row][col + 2];\n    \n                    // 색상 비교 → 과일 인덱스 비교\n                    if (t1 && t2 && tile['fruitIndex'] === t1['fruitIndex'] && tile['fruitIndex'] === t2['fruitIndex']) {\n                        matchedTiles.push(tile, t1, t2);\n                    }\n\n                }\n    \n                // 세로 검사\n                if (row <= this.boardSize - 3) {\n                    let t1 = this.board[row + 1][col];\n                    let t2 = this.board[row + 2][col];\n    \n                    // 색상 비교 → 과일 인덱스 비교\n                    if (t1 && t2 && tile['fruitIndex'] === t1['fruitIndex'] && tile['fruitIndex'] === t2['fruitIndex']) {\n                        matchedTiles.push(tile, t1, t2);\n                    }\n\n                }\n            }\n        }\n    \n        matchedTiles = Array.from(new Set(matchedTiles));\n    \n        if (matchedTiles.length > 0) {\n            if (this.gameManager) {\n                this.gameManager.addMatchScore(matchedTiles.length);\n            }\n            for (const tile of matchedTiles) {\n                tile.explode();\n                this.board[tile.row][tile.col] = null;\n            }\n    \n            this.scheduleOnce(() => {\n                this.fillEmptySpaces();\n                this.scheduleOnce(() => {\n                    this.spawnNewTiles();\n                    this.scheduleOnce(() => {\n                        // **다시 매칭이 일어날 수 있으므로 재귀 호출**\n                        this.checkAndExplodeMatches();\n                    }, 0.3);\n                }, 0.3);\n            }, 0.3);\n        } else {\n            // 폭발된 타일이 없으면 다음 행동 없음\n            this.isSwapping = false;\n        }\n    }\n    \n\n    swapTiles(tileA: Tile, tileB: Tile) {\n        if (this.isSwapping) return;\n    \n        let rowDiff = Math.abs(tileA.row - tileB.row);\n        let colDiff = Math.abs(tileA.col - tileB.col);\n    \n        if (!((rowDiff === 1 && colDiff === 0) || (rowDiff === 0 && colDiff === 1))) {\n            console.log(\"인접한 타일이 아닙니다! 교환 불가\");\n            return;\n        }\n    \n        this.isSwapping = true;\n    \n        // 보드에서 교환\n        const tempRow = tileA.row;\n        const tempCol = tileA.col;\n    \n        this.board[tileA.row][tileA.col] = tileB;\n        this.board[tileB.row][tileB.col] = tileA;\n    \n        tileA.row = tileB.row;\n        tileA.col = tileB.col;\n        tileB.row = tempRow;\n        tileB.col = tempCol;\n    \n        const posA = this.getTilePosition(tileA.row, tileA.col);\n        const posB = this.getTilePosition(tileB.row, tileB.col);\n    \n        cc.tween(tileA.node).to(0.2, { position: posA }).start();\n        cc.tween(tileB.node).to(0.2, { position: posB }).call(() => {\n            // 임시로 매칭 탐지\n            const matchedTiles: Tile[] = [];\n    \n            const detectTempMatch = () => {\n                for (let row = 0; row < this.boardSize; row++) {\n                    for (let col = 0; col < this.boardSize; col++) {\n                        const tile = this.board[row][col];\n                        if (!tile) continue;\n    \n                        // 가로\n                        if (col <= this.boardSize - 3) {\n                            const t1 = this.board[row][col + 1];\n                            const t2 = this.board[row][col + 2];\n                            if (t1 && t2 && tile['fruitIndex'] === t1['fruitIndex'] && tile['fruitIndex'] === t2['fruitIndex']) {\n                                return true;\n                            }\n                            \n                        }\n    \n                        // 세로\n                        if (row <= this.boardSize - 3) {\n                            const t1 = this.board[row + 1][col];\n                            const t2 = this.board[row + 2][col];\n                            if (t1 && t2 && tile['fruitIndex'] === t1['fruitIndex'] && tile['fruitIndex'] === t2['fruitIndex']) {\n                                return true;\n                            }\n                            \n                        }\n                    }\n                }\n                return false;\n            };\n    \n            if (detectTempMatch()) {\n                this.checkAndExplodeMatches();  // 매칭이 있으면 계속 진행\n            } else {\n                // 없으면 되돌리기\n                // 위치, 보드 정보 다시 교환\n                this.board[tileA.row][tileA.col] = tileB;\n                this.board[tileB.row][tileB.col] = tileA;\n    \n                const tempRow2 = tileA.row;\n                const tempCol2 = tileA.col;\n    \n                tileA.row = tileB.row;\n                tileA.col = tileB.col;\n                tileB.row = tempRow2;\n                tileB.col = tempCol2;\n    \n                const resetPosA = this.getTilePosition(tileA.row, tileA.col);\n                const resetPosB = this.getTilePosition(tileB.row, tileB.col);\n    \n                cc.tween(tileA.node).to(0.2, { position: resetPosA }).start();\n                cc.tween(tileB.node).to(0.2, { position: resetPosB }).call(() => {\n                    this.isSwapping = false;\n                }).start();\n            }\n        }).start();\n    }\n    \n\n    fillEmptySpaces() {\n        for (let col = 0; col < this.boardSize; col++) {\n            for (let row = this.boardSize - 1; row >= 0; row--) {\n                if (!this.board[row][col]) {\n                    for (let upperRow = row - 1; upperRow >= 0; upperRow--) {\n                        if (this.board[upperRow][col]) {\n                            const fallingTile = this.board[upperRow][col];\n                            this.board[row][col] = fallingTile;\n                            this.board[upperRow][col] = null;\n\n                            fallingTile.row = row;\n                            fallingTile.col = col;\n\n                            const targetPos = this.getTilePosition(row, col);\n                            cc.tween(fallingTile.node)\n                                .to(0.2, { position: targetPos })\n                                .start();\n                            break;\n                        }\n                    }\n                }\n            }\n        }\n    }\n\n    spawnNewTiles() {\n        for (let row = 0; row < this.boardSize; row++) {\n            for (let col = 0; col < this.boardSize; col++) {\n                if (!this.board[row][col]) {\n                    const tileNode = cc.instantiate(this.tilePrefab);\n                    tileNode.parent = this.node;\n\n                    const pos = this.getTilePosition(row, col);\n                    tileNode.setPosition(pos);\n\n                    const tile = tileNode.getComponent(Tile);\n                    tile.row = row;\n                    tile.col = col;\n\n                    tile.setRandomFruit();  // 이전의 setRandomColor()에서 교체\n                    tile.addOutline();\n\n                    this.board[row][col] = tile;\n                }\n            }\n        }\n    }\n\n    getTilePosition(row: number, col: number): cc.Vec3 {\n        let totalTileSize = this.tileSize + this.gap;\n        let startX = -(this.boardSize - 1) * totalTileSize / 2;\n        let startY = (this.boardSize - 1) * totalTileSize / 2;\n\n        let x = startX + col * totalTileSize;\n        let y = startY - row * totalTileSize;\n\n        return new cc.Vec3(x, y, 0);\n    }\n\n\n    \n}\n"]}