{"version":3,"sources":["assets\\scripts\\MazeGame.ts"],"names":[],"mappings":"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","file":"","sourceRoot":"/","sourcesContent":["﻿\nimport MazeLogic from \"./MazeLogic\";\nimport PlayerController from \"./PlayerController\";\n\nconst { ccclass, property } = cc._decorator;\n\n@ccclass\nexport default class MazeGame extends cc.Component {\n    @property(cc.Node)\n    mazeContainer: cc.Node = null!;  // 미로를 그릴 노드드\n    @property(cc.Node)\n    playerNode: cc.Node = null!;     // 플레이어 노드\n    @property(cc.Node)\n    goalNode: cc.Node = null!;       // 목표 노드\n\n    private mazeLogic: MazeLogic;\n\n    start() {\n        // MazeContainer의 앵커와 위치를 (0, 0)으로 설정\n        this.mazeContainer.setAnchorPoint(0, 0);\n        this.mazeContainer.setPosition(0, 0);\n        // 21×21 그리드, 각 셀 50픽셀 전체 크기는 1050×1050 픽셀\n        this.mazeContainer.setContentSize(21 * 50, 21 * 50);\n\n        // 미로 생성 및 렌더링\n        this.mazeLogic = new MazeLogic(21, 21, this.mazeContainer);\n        this.mazeLogic.generateMaze();\n        this.mazeLogic.renderMaze();\n\n        // 플레이어 위치를 시작 셀(1,1)에 맞게 설정\n        const startPos = this.mazeLogic.getStartPosition();\n        this.playerNode.setPosition(startPos.x * this.mazeLogic.cellSize, startPos.y * this.mazeLogic.cellSize);\n        this.updatePlayerAppearance();\n\n        // 목표 위치를 (cols - 2, rows - 2)로 설정\n        const goalPos = this.mazeLogic.getGoalPosition();\n        this.goalNode.setPosition(goalPos.x * this.mazeLogic.cellSize, goalPos.y * this.mazeLogic.cellSize);\n        this.updateGoalAppearance();\n\n        // 플레이어, 목표 잘보이도록 zindex 조절절\n        this.playerNode.zIndex = 10;\n        this.goalNode.zIndex = 10;\n\n        // PlayerController에 미로 정보를 전달\n        const playerCtrl = this.playerNode.getComponent(PlayerController);\n        if (playerCtrl) {\n            playerCtrl.mazeLogic = this.mazeLogic;\n            playerCtrl.cellSize = this.mazeLogic.cellSize;\n            playerCtrl.gridCols = 21;\n            playerCtrl.gridRows = 21;\n        }\n    }\n\n    updatePlayerAppearance() {\n        if (this.playerNode.getComponent(cc.Sprite)) return;\n        let graphics = this.playerNode.getComponent(cc.Graphics);\n        if (!graphics) graphics = this.playerNode.addComponent(cc.Graphics);\n        graphics.clear();\n        graphics.fillColor = cc.Color.RED;\n        // 플레이어: 각 셀 중앙에 그려지는 원 (반지름 = 셀 크기의 1/3)\n        graphics.circle(this.mazeLogic.cellSize / 2, this.mazeLogic.cellSize / 2, this.mazeLogic.cellSize / 3);\n        graphics.fill();\n    }\n\n    updateGoalAppearance() {\n        if (this.goalNode.getComponent(cc.Sprite)) return;\n        let graphics = this.goalNode.getComponent(cc.Graphics);\n        if (!graphics) graphics = this.goalNode.addComponent(cc.Graphics);\n        graphics.clear();\n        graphics.fillColor = cc.Color.GREEN;\n        // 목표: 셀의 전체 크기를 채우는 사각형\n        graphics.rect(0, 0, this.mazeLogic.cellSize, this.mazeLogic.cellSize);\n        graphics.fill();\n    }\n\n    update() {\n        const playerPos = this.playerNode.getPosition();\n        const goalPos = this.goalNode.getPosition();\n        const threshold = 5; // 픽셀 단위 임계값 (필요에 따라 조정)\n\n        if (Math.abs(playerPos.x - goalPos.x) < threshold &&\n            Math.abs(playerPos.y - goalPos.y) < threshold) {\n            cc.log(\"You Win!\");\n            cc.director.loadScene(\"GameOver\"); // 게임오버 씬씬\n        }\n    }\n    }"]}